package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal TokenC3D IGUAL,DIFERENTE,MAYORQUE,MENORQUE,MAYORIGUAL,MENORIGUAL,AND,OR,NOT;
nonterminal NodoC3D inicial, logica, relacional, operador_relacional, expresion;


precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL,DIFERENTE,MAYORQUE,MENORQUE,MAYORIGUAL,MENORIGUAL;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} logica:exp 
                    {: 
                        RESULT = exp;
                        ControlC3D.agregarC3D("//Ãšltimo valor: " + exp.getCad());
                        ControlC3D.agregar_Verdadero(exp.get_ev());
                        ControlC3D.agregar_Falso(exp.get_ef());
                    :}
                    ;

logica   ::=    logica:izq OR logica:der
                    {: 
                        String temp = izq.getCad();
                        temp += izq.get_ef()+":\n";
                        temp += der.getCad()+"\n";
   
                        ControlC3D.agregarC3D(temp);
                         RESULT = new NodoC3D("",izq.get_ev()+","+der.get_ev(),der.get_ef());
               
                    :}
                     
            |   logica:izq AND logica:der
                    {: 
                         String temp = izq.getCad();
                        temp += izq.get_ev()+":\n";
                        temp += der.getCad()+"\n";
   
                        ControlC3D.agregarC3D(temp);
                         RESULT = new NodoC3D("",der.get_ev()+","+izq.get_ef(),der.get_ef());
               
                    :}
                     
            |   NOT logica:der
                    {: 
                        String temp = der.getCad();
                      
                        ControlC3D.agregarC3D(temp);
                         RESULT = new NodoC3D("",der.get_ef(),der.get_ev());
               
                    :}
                    
            | relacional:rel
                {:
                    RESULT = rel;
                :}
                ;
 relacional ::= expresion:izq operador_relacional:op expresion:der
            {:
                String et_v = ControlC3D.generar_etiqueta();
                String et_f = ControlC3D.generar_etiqueta();
                String c3d = "if "+izq.getCad()+ op.getCad() + der.getCad() +" then goto "+et_v+" : \n";
                c3d += "goto " + et_f +" : \n";
                RESULT = new NodoC3D(c3d,et_v, et_f);
            :}
            
            |   expresion:arit
                    {: 
          
                        RESULT = arit; 
                    :}
             ;
operador_relacional ::= 
          MAYORQUE {: RESULT = new NodoC3D(">"); :}
        | MENORQUE {: RESULT = new NodoC3D("<"); :}
        | IGUAL {: RESULT = new NodoC3D("=="); :}
        | DIFERENTE {: RESULT = new NodoC3D("!="); :}
        | MAYORIGUAL {: RESULT = new NodoC3D(">="); :}
        | MENORIGUAL{: RESULT = new NodoC3D("<="); :}
        ;

expresion ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ logica:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;